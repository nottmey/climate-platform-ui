# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Tells the service this field/object has access authorized by an API key."
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"Directs the schema to enforce authorization on a field"
directive @aws_auth(
    "List of cognito user pool groups which have access on this field"
    cognito_groups: [String]
) on FIELD_DEFINITION

"Tells the service this field/object has access authorized by a Cognito User Pools token."
directive @aws_cognito_user_pools(
    "List of cognito user pool groups which have access on this field"
    cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by sigv4 signing."
directive @aws_iam on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by a Lambda Authorizer."
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"Tells the service this field/object has access authorized by an OIDC token."
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead."
directive @aws_publish(
    "List of subscriptions which will be published to when this mutation is called."
    subscriptions: [String]
) on FIELD_DEFINITION

"Tells the service which mutation triggers this subscription."
directive @aws_subscribe(
    "List of mutations which will trigger this subscription when they are called."
    mutations: [String]
) on FIELD_DEFINITION

"This directive allows results to be deferred during execution"
directive @defer on FIELD

" generated, do not edit manually!"
interface Attribute {
    id: ID!
    name: String!
}

" generated, do not edit manually!"
interface EntityBase {
    id: ID!
}

" generated, do not edit manually!"
type BooleanAttribute implements Attribute {
    boolean: Boolean!
    id: ID!
    name: String!
}

" generated, do not edit manually!"
type DateTimeAttribute implements Attribute {
    dateTime: AWSDateTime!
    id: ID!
    name: String!
}

" generated, do not edit manually!"
type Entity {
    attributes: [Attribute!]!
    context: AWSJSON
    id: ID!
}

" generated, do not edit manually!"
type EntityListPage {
    context: AWSJSON
    info: PageInfo!
    values: [Entity!]!
}

" generated, do not edit manually!"
type MultiBooleanAttribute implements Attribute {
    booleans: [Boolean!]!
    id: ID!
    name: String!
}

" generated, do not edit manually!"
type MultiDateTimeAttribute implements Attribute {
    dateTimes: [AWSDateTime!]!
    id: ID!
    name: String!
}

" generated, do not edit manually!"
type MultiReferenceAttribute implements Attribute {
    id: ID!
    name: String!
    refs: [ID!]!
}

" generated, do not edit manually!"
type MultiStringAttribute implements Attribute {
    id: ID!
    name: String!
    strings: [String!]!
}

" generated, do not edit manually!"
type MultiTupleAttribute implements Attribute {
    id: ID!
    name: String!
    tuples: [AWSJSON!]!
}

" generated, do not edit manually!"
type Mutation {
    createPlanetaryBoundary(id: ID!, value: PlanetaryBoundaryInput!): PlanetaryBoundary!
    deletePlanetaryBoundary(id: ID!): PlanetaryBoundary
    mergePlanetaryBoundary(id: ID!, value: PlanetaryBoundaryInput!): PlanetaryBoundary
    publishCreatedPlanetaryBoundary(id: ID!, value: PlanetaryBoundaryInput!): PlanetaryBoundary
    publishDeletedPlanetaryBoundary(id: ID!, value: PlanetaryBoundaryInput!): PlanetaryBoundary
    publishUpdatedPlanetaryBoundary(id: ID!, value: PlanetaryBoundaryInput!): PlanetaryBoundary
}

" generated, do not edit manually!"
type PageInfo {
    current: Int!
    first: Int!
    last: Int!
    next: Int
    prev: Int
    size: Int!
}

" generated, do not edit manually!"
type PlanetaryBoundary implements EntityBase {
    context: AWSJSON
    description: String
    id: ID!
    name: String
}

" generated, do not edit manually!"
type PlanetaryBoundaryListPage {
    context: AWSJSON
    info: PageInfo!
    values: [PlanetaryBoundary!]!
}

" generated, do not edit manually!"
type Query {
    getEntity(id: ID!): Entity
    getPlanetaryBoundary(id: ID!): PlanetaryBoundary
    listEntity(filter: EntityFilter, page: PageQuery): EntityListPage!
    listPlanetaryBoundary(page: PageQuery): PlanetaryBoundaryListPage!
}

" generated, do not edit manually!"
type ReferenceAttribute implements Attribute {
    id: ID!
    name: String!
    ref: ID!
}

" generated, do not edit manually!"
type StringAttribute implements Attribute {
    id: ID!
    name: String!
    string: String!
}

" generated, do not edit manually!"
type Subscription {
    onCreatedPlanetaryBoundary(description: String, id: ID, name: String): PlanetaryBoundary
    onDeletedPlanetaryBoundary(description: String, id: ID, name: String): PlanetaryBoundary
    onUpdatedPlanetaryBoundary(description: String, id: ID, name: String): PlanetaryBoundary
}

" generated, do not edit manually!"
type TupleAttribute implements Attribute {
    id: ID!
    name: String!
    tuple: AWSJSON!
}

"The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept \"negative years\" of the form `-YYYY` which correspond to years before `0000`. For example, \"**-2017-01-01T00:00Z**\" and \"**-9999-01-01T00:00Z**\" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, \"**1970-01-01T12:00:00.2Z**\", \"**1970-01-01T12:00:00.277Z**\" and \"**1970-01-01T12:00:00.123456789Z**\" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `Â±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard."
scalar AWSDateTime

"The `AWSJSON` scalar type provided by AWS AppSync, represents a JSON string that complies with [RFC 8259](https://tools.ietf.org/html/rfc8259).  Maps like \"**{\\\\\"upvotes\\\\\": 10}**\", lists like \"**[1,2,3]**\", and scalar values like \"**\\\\\"AWSJSON example string\\\\\"**\", \"**1**\", and \"**true**\" are accepted as valid JSON and will automatically be parsed and loaded in the resolver mapping templates as Maps, Lists, or Scalar values rather than as the literal input strings.  Invalid JSON strings like \"**{a: 1}**\", \"**{'a': 1}**\" and \"**Unquoted string**\" will throw GraphQL validation errors."
scalar AWSJSON

" generated, do not edit manually!"
input EntityFilter {
    attributes: [ID!]
}

" generated, do not edit manually!"
input PageQuery {
    number: Int
    size: Int
}

" generated, do not edit manually!"
input PlanetaryBoundaryInput {
    description: String
    name: String
}
