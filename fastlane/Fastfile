# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# For local execution fill your .env.local file and execute lanes like this:
# bundle exec fastlane set_next_version --env local

require 'rbnacl'
require 'octokit'

def store_secret(secret_name, secret_value)
  repo = ENV['GITHUB_REPOSITORY']
  access_token = ENV['SECRET_SETTING_TOKEN']

  client = Octokit::Client.new(:access_token => access_token)
  public_key_response = client.get_actions_public_key(repo)
  key_id = public_key_response['key_id']
  decoded_key = Base64.decode64(public_key_response['key'])

  box = RbNaCl::Boxes::Sealed.from_public_key(decoded_key)
  encrypted_value = Base64.strict_encode64(box.encrypt(secret_value))

  client.create_or_update_actions_secret(repo, secret_name, {
    key_id: key_id,
    encrypted_value: encrypted_value
  })

  UI.success("Successfully set new value for secret #{secret_name}.")
end

opt_out_usage

play_console_track = 'internal' # also possible: production, beta, alpha, internal

key_id = ENV["APP_STORE_CONNECT_API_KEY_ID"]
app_store_connect_api_key(
  key_id: key_id,
  issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
  key_filepath: File.expand_path("~/.private_keys/AuthKey_#{key_id}.p8")
)

lane :set_next_version do |options|
  # TODO allow increment (major, minor, patch) of version via options

  # android
  latest_android_version_code = google_play_track_version_codes(track: play_console_track)[0]
  latest_android_release_name = google_play_track_release_names(track: play_console_track)[0]
  latest_android_version = Gem::Version.new(latest_android_release_name)

  # ios
  latest_testflight_build_number = latest_testflight_build_number(initial_build_number: 0)
  latest_testflight_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
  latest_ios_version = Gem::Version.new(latest_testflight_version)

  latest_build_number = latest_android_version_code > latest_testflight_build_number ? latest_android_version_code : latest_testflight_build_number
  latest_version = latest_android_version > latest_ios_version ? latest_android_version : latest_ios_version

  next_combined_version = "#{latest_version}+#{latest_build_number + 1}"
  UI.success("Next combined build version is #{next_combined_version}.")

  # writing it to pubspec.yaml in a structure preserving manner, since we need
  # to write the result to a file anyway and it's the default source for a version anyway
  sh("yq -i '.version = \"#{next_combined_version}\"' ../pubspec.yaml")
end

def ios_ensure_presence_of_valid_distribution_certificate
  # TODO check local dev usability

  # setup keychain for ci
  keychain_path = File.expand_path("build.keychain")
  keychain_password = ""
  create_keychain(
    path: keychain_path,
    password: keychain_password,
    default_keychain: true,
    unlock: true,
    timeout: 3600
  )
  # setup distribution certificate in keychain
  certificate_id = get_certificates(
    # TODO prevent logging of certificates content
    # use force=true, if error happens because of expired certificate
    keychain_path: keychain_path,
    keychain_password: keychain_password
  )
  # upload resulting certificate key file to secrets
  certificate_key_file = "#{certificate_id}.p12"
  certificate_key_path = File.expand_path("../#{certificate_key_file}")
  raise "distribution certificate private key missing" unless File.exist?(certificate_key_path)
  certificate_key_content_hashed = sh("base64 -i #{certificate_key_path} | tr -d \\\\n", log: false)
  store_secret('APP_STORE_DISTRIBUTION_CERT_ID', certificate_id)
  store_secret('APP_STORE_DISTRIBUTION_CERT_KEY_FILE', certificate_key_content_hashed)
end

desc "Ensures that a valid distribution certificate is created, setup in keychain and backed up in secrets."
lane :ios_ensure_valid_distribution_certificate do |options|
  ios_ensure_presence_of_valid_distribution_certificate
end

desc "Builds and signs the app."
lane :ios_build do |options|
  ios_ensure_presence_of_valid_distribution_certificate
  # always regenerate provisioning profile with current certificate
  profile_uuid = get_provisioning_profile(force: true)
  # disable automatic signing within pipeline (enabled just for easier development)
  update_code_signing_settings(
    path: "ios/Runner.xcodeproj",
    targets: ["Runner"],
    use_automatic_signing: false,
    code_sign_identity: "iPhone Distribution",
    profile_uuid: profile_uuid,
  )

  # if needed, also regenerate for additionally bundled extensions:
  # ex_profile_uuid = get_provisioning_profile(app_identifier: "bundle.id.ExampleExtension", force: true)
  # update_code_signing_settings(
  #   path: "Runner.xcodeproj",
  #   targets: ["ExampleExtension"],
  #   use_automatic_signing: false,
  #   code_sign_identity: "iPhone Distribution",
  #   profile_uuid: ex_profile_uuid,
  # )

  # build app including symbols
  build_app(
    workspace: "ios/Runner.xcworkspace",
    scheme: "Runner",
    configuration: "Release",
    include_symbols: true
  )
end

desc "Uploads app and manages submission."
lane :ios_deploy do |options|
  upload_to_testflight(
    ipa: "Runner.ipa",
    distribute_external: true,
    groups: "External Testing",
    changelog: "Happy Testing!"
  )
end
